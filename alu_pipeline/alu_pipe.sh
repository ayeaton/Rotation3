#$ -cwd
#$ -S /bin/bash
#$ -N alu_pipe
#$ -l mem_free=4G
#$ -pe threaded 4
#$ -e logs/error_$TASK_ID.txt
#$ -o logs/stdout_$TASK_ID.txt


# - - - - - - - - - - - - - - - - - - - - -
# Load required environment
# - - - - - - - - - - - - - - - - - - - - -

module load bedtools

# - - - - - - - - - - - - - - - - - - - - -
# Set variables
# inputDir = folder with cleaned fastq files
# outputDir = must match outputDir from previous step
# chocophlan = nucloetide database location for humann2
# uniref = protein database location for humann2
# - - - - - - - - - - - - - - - - - - - - -
inputDir="/ifs/data/proteomics/projects/Anna/Retrotransp-transcription/Breast/aluY/align1/star_norm"
outputDir="/ifs/data/proteomics/projects/Anna/Retrotransp-transcription/Breast/aluY/alu/norm"
alu_pipeDir="/ifs/home/ay1392/ROT3/alu_pipe"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Variables for processing the data in parallel
# DO NOT CHANGE!
# This code is meant to assign one sample to the analysis
# by listing all of the files in a directory (inputDir)
# and then finding the Nth one in the list. N will be
# assigned by the $SGE_TASK_ID variable generated by
# the SGE cluster.
# Note: $SGE_TASK_ID will only be assigned if the flag
# -t is used and the job is submitted by 'qsub -t 1:N script.sh'
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Assign index variable
number=`expr $SGE_TASK_ID - 1`

# Generate ls of input files
files=(${inputDir}/*.bam)

# Get fastq file from index variable
sequence=${files[number]}

# Get the name of current working file
BN=`basename $sequence .bam`

echo $BN

# Print diagnostics
echo "- - - - Diagnostics - - - - - - - - - - -"
echo "Number of slots: $NSLOTS"
echo "Number of hosts: $NHOSTS"
echo "Number in Queue: $QUEUE"
echo -e "OS type: $SGE_ARCH"
echo -e "Working on Task ID: "${SGE_TASK_ID}" "
echo -e "Working on file: "${files[number]}" "
echo -e "Output directory: "${outputDir}" \n"
echo "Run parameters:"
hostname -f
date
pwd
echo -e "- - - - - - - - - - - - - - - - - - -  \n"


${alu_pipeDir}/intersect.bash ${sequence} ${BN} ${outputDir} ${alu_pipeDir}

wait

${alu_pipeDir}/concat.bash ${outputDir} ${BN}

wait

${alu_pipeDir}/collapse_dupes.bash ${inputDir} ${BN} ${outputDir} ${alu_pipeDir}

wait

${alu_pipeDir}/sort.bash ${outputDir} ${BN}

wait

${alu_pipeDir}/paste.bash ${inputDir} ${BN} ${outputDir} ${alu_pipeDir}

check output

wait

sort -n -k25 ${outputDir}/${BN}.paste.bed >> ${outputDir}/${BN}.paste_sort.bed


wait


#rm -rf ${outputDir}/${BN}.*350.bed 
#rm -rf ${outputDir}/${BN}.*350_cat.bed
#rm -rf ${outputDir}/${BN}.*350_sort.bed
#rm -rf ${outputDir}/${BN}.*bedgraph
